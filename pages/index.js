import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";

export default function Home() {
  var [pfaas, setPFAAs] = useState([]);

  useEffect(() => {
    fetch("/api/perfluoroAlkylAcidTrendlineEquations")
      .then((response) => response.json())      
      .then((data) => setPFAAs(data.records));
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Perfluoro Alkyl Acid Trendline Equations</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="text-center">Perfluoro Alkyl Acid Trendline Equations</h1>
      <div className="table-responsive">
        <table className="table">
          <thead>
            <tr>
              <th scope="col">PFAA</th>
              <th scope="col">soil concentration</th>
              <th scope="col">x input</th>
              <th scope="col">Shoot Equation</th>
              <th scope="col">y output</th>              
              <th scope="col">y * soil concentration</th>
              <th scope="col">
                R<sup>2</sup>
              </th>
              <th scope="col">95% CI</th>
              <th scope="col">x input</th>
              <th scope="col">Root Equation</th>
              <th scope="col">y output</th>              
              <th scope="col">y * soil concentration</th>
              <th scope="col">
                R<sup>2</sup>
              </th>
              <th scope="col">95% CI</th>
            </tr>
          </thead>
          <tbody>
            {pfaas.map((pfaa) => (
              <tr key={pfaa.id}>
                <th scope="row">{pfaa.fields.PFAA}</th>
                <td>
                  <input
                    type="number"
                    placeholder="soil concentration"
                    onChange={(event) => {                      
                      setPFAAs(function (prevState) {                        
                        var value = event.target.value;
                        return prevState.map((obj) => {                          
                          if (obj.id == pfaa.id) {                            
                            var freshState = { ...obj };                            
                            freshState[pfaa.fields.PFAA + "soilConcentration"] = Number(value);
                            return freshState;
                          }                          
                          return obj;
                        });
                      });                      
                    }}
                  />
                </td>
                <td>
                  <input
                    type="number"
                    placeholder="x input for shoot equation"
                    onChange={(event) => {                      
                      setPFAAs(function (prevState) {                        
                        var value = event.target.value;
                        return prevState.map((obj) => {                          
                          if (obj.id == pfaa.id) {                            
                            var freshState = { ...obj };                            
                            freshState[pfaa.fields.PFAA + "shootX"] =
                              Number(value);
                            freshState[pfaa.fields.PFAA + "shootY"] =
                              pfaa.fields["Shoot Coefficient"] *
                                Math.log(value) +
                              pfaa.fields["Shoot Constant"];                                                                                    
                            return freshState;
                          }                          
                          return obj;
                        });
                      });                      
                    }}
                  />
                </td>
                <td>{`y = ${pfaa.fields['Shoot Coefficient']}ln(x) + ${pfaa.fields['Shoot Constant']}`}</td>
                <td>{pfaa[pfaa.fields.PFAA + "shootY"]}</td>
                <td>{pfaa[pfaa.fields.PFAA + "shootY"] && pfaa[pfaa.fields.PFAA + "soilConcentration"] && pfaa[pfaa.fields.PFAA + "shootY"] * pfaa[pfaa.fields.PFAA + "soilConcentration"]}</td>
                <td>{pfaa.fields['Shoot R-Squared'].toFixed(2)}</td>
                <td>{pfaa.fields['Shoot 95% Confidence Interval']}</td>
                <td>
                <input
                    type="number"
                    placeholder="x input for root equation"
                    onChange={(event) => {                      
                      setPFAAs(function (prevState) {                        
                        var value = event.target.value;
                        return prevState.map((obj) => {                          
                          if (obj.id == pfaa.id) {                            
                            var freshState = { ...obj };                            
                            freshState[pfaa.fields.PFAA + "rootX"] =
                              Number(value);
                            freshState[pfaa.fields.PFAA + "rootY"] =
                              pfaa.fields["Root Coefficient"] *
                                Math.log(value) +
                              pfaa.fields["Root Constant"];                                                                                    
                            return freshState;
                          }                          
                          return obj;
                        });
                      });
                      //change from set state to make api call to update item in database
                    }}
                  />
                </td>
                <td>y = {pfaa.fields['Root Coefficient']}ln(x) + {pfaa.fields['Root Constant']}</td>
                <td>{pfaa[pfaa.fields.PFAA + "rootY"]}</td>
                <td>{pfaa[pfaa.fields.PFAA + "rootY"] && pfaa[pfaa.fields.PFAA + "soilConcentration"] && pfaa[pfaa.fields.PFAA + "rootY"] * pfaa[pfaa.fields.PFAA + "soilConcentration"]}</td>
                <td>{pfaa.fields['Root R-Squared'].toFixed(2)}</td>
                <td>{pfaa.fields['Root 95% Confidence Interval']}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
