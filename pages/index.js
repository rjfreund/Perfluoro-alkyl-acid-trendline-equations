import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";

export default function Home() {
  var [pfaas, setPFAAs] = useState([]);

  useEffect(() => {
    fetch("/api/perfluoroAlkylAcidTrendlineEquations")
      .then((response) => response.json())
      .then((data) => setPFAAs(data.records));
  }, []);

  function updateEquations(updatedPfaa) {
    updatedPfaa.fields.shootY = (updatedPfaa.fields["Shoot Coefficient"] * Math.log(updatedPfaa.fields.percentSoilOrganicCarbon) + updatedPfaa.fields["Shoot Constant"]).toFixed(2);
    updatedPfaa.fields.rootY = (updatedPfaa.fields["Root Coefficient"] * Math.log(updatedPfaa.fields.percentSoilOrganicCarbon) + updatedPfaa.fields["Root Constant"]).toFixed(2);
    if (updatedPfaa.fields.shootY && updatedPfaa.fields.soilConcentration) {
      updatedPfaa.fields.estimatedShootPFAAsConcentration = updatedPfaa.fields.shootY * updatedPfaa.fields.soilConcentration;
      updatedPfaa.fields.estimatedShootPFAAsConcentrationPlusConfidenceInterval = (updatedPfaa.fields.estimatedShootPFAAsConcentration + updatedPfaa.fields['Shoot 95% Confidence Interval']).toFixed(2);
    }
    if (updatedPfaa.fields.rootY && updatedPfaa.fields.soilConcentration) {
      updatedPfaa.fields.estimatedRootPFAAsConcentration = updatedPfaa.fields.rootY * updatedPfaa.fields.soilConcentration;
      updatedPfaa.fields.estimatedRootPFAAsConcentrationPlusConfidenceInterval = ((updatedPfaa.fields.rootY * updatedPfaa.fields.soilConcentration) + updatedPfaa.fields['Root 95% Confidence Interval']).toFixed(2);
    }

    return updatedPfaa;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Perfluoro Alkyl Acid Trendline Equations</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="text-center">Perfluoro Alkyl Acid Trendline Equations</h1>
      <div className="table-responsive">
        <table className="table">
          <thead>
            <tr>
              <th scope="col">PFAA</th>
              <th scope="col">soil concentration</th>
              <th scope="col">% soil organic carbon</th>
              <th hidden scope="col">Shoot Equation</th>
              <th scope="col">estimated shoot BCF</th>
              <th scope="col">estimated shoot PFAAs concentration</th>
              <th scope="col">+ 95% CI</th>
              <th scope="col">R<sup>2</sup></th>
              <th hidden scope="col">95% CI</th>
              <th hidden scope="col">Root Equation</th>
              <th scope="col">estimated root BCF</th>
              <th scope="col">estimated root PFAAs concentration</th>
              <th scope="col">+ 95% CI</th>
              <th scope="col">R<sup>2</sup></th>
              <th hidden scope="col">95% CI</th>
            </tr>
          </thead>
          <tbody>
            {pfaas.map((pfaa) => (
              <tr key={pfaa.id}>
                <th scope="row">{pfaa.fields.PFAA}</th>
                <td>
                  <input
                    type="number"
                    placeholder="soil concentration"
                    onChange={(event) => {
                      setPFAAs(function (prevState) {
                        var value = event.target.value;
                        return prevState.map((obj) => {
                          if (obj.id == pfaa.id) {
                            var updatedPfaa = { ...obj };
                            updatedPfaa.fields.soilConcentration = Number(value);
                            updatedPfaa = updateEquations({ ...updatedPfaa })
                            return updatedPfaa;
                          }
                          return obj;
                        });
                      });
                    }}
                  />
                </td>
                <td>
                  <input
                    type="number"
                    placeholder="% soil organic carbon"
                    onChange={(event) => {
                      setPFAAs(function (prevState) {
                        var value = event.target.value;
                        return prevState.map((obj) => {
                          if (obj.id == pfaa.id) {
                            var updatedPfaa = { ...obj };
                            updatedPfaa.fields.percentSoilOrganicCarbon = Number(value);
                            updatedPfaa = updateEquations({ ...updatedPfaa });
                            return updatedPfaa;
                          }
                          return obj;
                        });
                      });
                    }}
                  />
                </td>
                <td hidden>{`y = ${pfaa.fields['Shoot Coefficient']}ln(x) + ${pfaa.fields['Shoot Constant']}`}</td>
                <td>{pfaa.fields.shootY}</td>
                <td>{pfaa.fields.estimatedShootPFAAsConcentration && pfaa.fields.estimatedShootPFAAsConcentration.toFixed(2)}</td>
                <td>{pfaa.fields.estimatedShootPFAAsConcentrationPlusConfidenceInterval}</td>
                <td>{pfaa.fields['Shoot R-Squared'].toFixed(2)}</td>
                <td hidden>{pfaa.fields['Shoot 95% Confidence Interval']}</td>
                <td hidden>y = {pfaa.fields['Root Coefficient']}ln(x) + {pfaa.fields['Root Constant']}</td>
                <td>{pfaa.fields.rootY}</td>
                <td>{pfaa.fields.estimatedRootPFAAsConcentration && pfaa.fields.estimatedRootPFAAsConcentration.toFixed(2)}</td>
                <td>{pfaa.fields.estimatedRootPFAAsConcentrationPlusConfidenceInterval}</td>
                <td>{pfaa.fields['Root R-Squared'].toFixed(2)}</td>
                <td hidden>{pfaa.fields['Root 95% Confidence Interval']}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
